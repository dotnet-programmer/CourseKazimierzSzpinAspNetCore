@using GymManager.Application.Clients.Commands.EditClient

@model EditClientCommand

@{
	ViewData["Title"] = "Edytowanie danych klienta";
}

<div class="card card-primary card-border-top">

	@using (Html.BeginForm("EditClient", "Client"))
	{
		@Html.AntiForgeryToken()
		@Html.HiddenFor(x => x.UserId)

		<div class="card-body">

			<div class="form-group">
				@Html.LabelFor(x => x.Email)
				@Html.TextBoxFor(x => x.Email, new { @class = "form-control", @readonly = "readonly" })
			</div>

			<div class="form-group">
				@Html.LabelFor(x => x.FirstName)
				@Html.TextBoxFor(x => x.FirstName, new { @class = "form-control", placeholder = "Wprowadź imię" })
				@Html.ValidationMessageFor(x => x.FirstName)
			</div>

			<div class="form-group">
				@Html.LabelFor(x => x.LastName)
				@Html.TextBoxFor(x => x.LastName, new { @class = "form-control", placeholder = "Wprowadź nazwisko" })
				@Html.ValidationMessageFor(x => x.LastName)
			</div>

			<div class="form-check">
				@Html.CheckBoxFor(x => x.IsPrivateAccount, new { @class = "form-check-input" })
				@Html.LabelFor(x => x.IsPrivateAccount, new { @class = "form-check-label font-weight-bold" })
			</div>

			@* pokazywanie/ukrywanie NIP w zależności od zaznaczenia checkboxa - javascript *@
			<div class="form-group" id="divNipNumber" style="display: none;">
				@Html.LabelFor(x => x.NipNumber)
				@Html.TextBoxFor(x => x.NipNumber, new { @class = "form-control", placeholder = "Wprowadź NIP" })
				@Html.ValidationMessageFor(x => x.NipNumber)
			</div>

			<div class="form-group">
				@Html.LabelFor(x => x.Country)
				@Html.TextBoxFor(x => x.Country, new { @class = "form-control", placeholder = "Wprowadź kraj zamieszkania" })
				@Html.ValidationMessageFor(x => x.Country)
			</div>

			<div class="form-group">
				@Html.LabelFor(x => x.City)
				@Html.TextBoxFor(x => x.City, new { @class = "form-control", placeholder = "Wprowadź miejscowość zamieszkania" })
				@Html.ValidationMessageFor(x => x.City)
			</div>

			<div class="form-group">
				@Html.LabelFor(x => x.ZipCode)
				@Html.TextBoxFor(x => x.ZipCode, new { @class = "form-control", placeholder = "Wprowadź kod pocztowy" })
				@Html.ValidationMessageFor(x => x.ZipCode)
			</div>

			<div class="form-group">
				@Html.LabelFor(x => x.Street)
				@Html.TextBoxFor(x => x.Street, new { @class = "form-control", placeholder = "Wprowadź ulicę" })
				@Html.ValidationMessageFor(x => x.Street)
			</div>

			<div class="form-group">
				@Html.LabelFor(x => x.StreetNumber)
				@Html.TextBoxFor(x => x.StreetNumber, new { @class = "form-control", placeholder = "Wprowadź numer domu" })
				@Html.ValidationMessageFor(x => x.StreetNumber)
			</div>

		</div>

		<div class="card-footer">
			<button type="submit" class="btn btn-primary btn-lg">
				<i class="fas fa-solid fa-circle-check"></i>Zapisz
			</button>
		</div>
	}
</div>


@section Scripts {
	<partial name="Scripts/_ValidationScriptsPartial" />
	@* Input Mask *@
	<script src="~/lib/inputmask/jquery.inputmask.bundle.min.js"></script>

	<script>
		// jak strona zostanie wczytana to sprawdzana wartość właściwości IsPrivateAccount
		$(document).ready(function () 
		{
			if ('@Model.IsPrivateAccount.ToString().ToUpper()' == 'FALSE') {
				$("#divNipNumber").show();
			}
			// Input Mask
			$("#ZipCode").inputmask("99-999", { "clearIncomplete": true, showMaskOnHover: false });
		});

		// po zmianie wartości checkboxa:
		$('#IsPrivateAccount').click(function () 
		{
            // TODO: sprawdzić czy to działa
            $('#IsPrivateAccount').is(':checked') ? $("#divNipNumber").hide() : $("#divNipNumber").show();
			// if ($('#IsPrivateAccount').is(':checked')) {
			// 	$("#divNipNumber").hide();
			// }
			// else {
			// 	$("#divNipNumber").show();
			// }
		});
	</script>
}