@using GymManager.Application.Clients.Queries.GetClientDashboard

@model GetClientDashboardVm

@{
	ViewData["Title"] = "Pulpit";
}

@* podział pionowy na 2 części *@

@* z lewej strony ogłoszenia *@
<div class="col-12 col-xl-6">
	<div class="card card-primary card-border-top">
		<div class="card-body">
			<h3>Witaj @Model.Email</h3>
			@if (@Model.TicketEndDate.HasValue)
			{
				<h4 class="mt-4">Masz <span class="text-success">aktywny</span> karnet<br>(data wygaśnięcia: @Model.TicketEndDate.Value.ToLongDateString())</h4>
			}
			else
			{
				<h4 class="mt-4">Twój karnet jest <span class="text-danger">nieaktywny</span></h4>
			}
			<h6 class="announcements-header">Najnowsze ogłoszenia:</h6>
			<ul class="announcements-position no-decoration">
				@foreach (var announcement in Model.Announcements.Items)
				{
					<li><i class="fa-solid fa-check me-2"></i>@announcement.Date.ToLongDateString() <span>-</span> @announcement.Description</li>
				}
			</ul>
		</div>
	</div>
</div>

@* z prawej strony wykresy *@
<div class="col-12 col-xl-6">

	<div class="card card-primary card-border-top">
		<div class="card-body">
			<h3 class="mb-3">Ilość Twoich treningów:</h3>
            <canvas id="barChart" class="canvas-chart"></canvas>
		</div>
	</div>

	<div class="card card-primary card-border-top">
		<div class="card-body">
			<h3 class="mb-3">Najpopularniejsze treningi:</h3>
            <canvas id="pieChart" class="canvas-chart"></canvas>
		</div>
	</div>

</div>

@section Scripts {
	<script src=~/lib/Chart.js/chart.min.js></script>

	<script>
		const ctxBar = document.getElementById('barChart').getContext('2d');
		const barChart = new Chart(ctxBar, {
			type: 'bar',
			data: {
				labels: JSON.parse('@Html.Raw(Json.Serialize(Model.TrainingCountChart.Positions.Select(x => x.Label)))'),
				datasets: [{
					label: '@Html.Raw(Model.TrainingCountChart.Label)',
					data: JSON.parse('@Html.Raw(Json.Serialize(Model.TrainingCountChart.Positions.Select(x => x.Data)))'),
					backgroundColor: JSON.parse('@Html.Raw(Json.Serialize(Model.TrainingCountChart.Positions.Select(x => x.Color)))'),
					borderColor: JSON.parse('@Html.Raw(Json.Serialize(Model.TrainingCountChart.Positions.Select(x => x.BorderColor)))'),
					borderWidth: 1,
				}]
			},
			options: {
				scales: {
					y: {
						beginAtZero: true
					}
				}
			}
		});

		const ctxPie = document.getElementById('pieChart').getContext('2d');
		const pieChart = new Chart(ctxPie, {
			type: 'pie',
			data: {
				labels: JSON.parse('@Html.Raw(Json.Serialize(Model.TheBestTrainingsChart.Positions.Select(x => x.Label)))'),
				datasets: [{
					data: JSON.parse('@Html.Raw(Json.Serialize(Model.TheBestTrainingsChart.Positions.Select(x => x.Data)))'),
					backgroundColor: JSON.parse('@Html.Raw(Json.Serialize(Model.TheBestTrainingsChart.Positions.Select(x => x.Color)))'),
					borderColor: JSON.parse('@Html.Raw(Json.Serialize(Model.TheBestTrainingsChart.Positions.Select(x => x.BorderColor)))'),
					borderWidth: 1,
					hoverOffset: 4
				}]
			}
		});
	</script>
}