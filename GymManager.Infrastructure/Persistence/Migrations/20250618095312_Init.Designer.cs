// <auto-generated />
using System;
using GymManager.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GymManager.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250618095312_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GymManager.Domain.Entities.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("StreetNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("AddressId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Addresses", (string)null);
                });

            modelBuilder.Entity("GymManager.Domain.Entities.Announcement", b =>
                {
                    b.Property<int>("AnnouncementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnnouncementId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AnnouncementId");

                    b.ToTable("Announcements", (string)null);

                    b.HasData(
                        new
                        {
                            AnnouncementId = 1,
                            Date = new DateTime(2022, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Kod promocyjny na suplementy w sklepie abc = rabat12."
                        },
                        new
                        {
                            AnnouncementId = 2,
                            Date = new DateTime(2022, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "W najbliższą niedzielę siłownia jest otwarta do godsziny 24:00."
                        },
                        new
                        {
                            AnnouncementId = 3,
                            Date = new DateTime(2022, 1, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Jutrzejsze zajęcia crossfit zostały odwołane - przepraszamy."
                        },
                        new
                        {
                            AnnouncementId = 4,
                            Date = new DateTime(2022, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Zatrudnimy trenera personalnego."
                        },
                        new
                        {
                            AnnouncementId = 5,
                            Date = new DateTime(2022, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Od przyszłego miesiąca możesz kupić karnet dla dwóch osób w cenie jednego."
                        },
                        new
                        {
                            AnnouncementId = 6,
                            Date = new DateTime(2021, 12, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Zatrudnimy recepcjonistę."
                        },
                        new
                        {
                            AnnouncementId = 7,
                            Date = new DateTime(2021, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Kod promocyjny na suplementy w sklepie abc = rabat12."
                        },
                        new
                        {
                            AnnouncementId = 8,
                            Date = new DateTime(2021, 12, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "W poprzednim miesiącu zrobiłeś aż 12 treningów - gratulacje."
                        },
                        new
                        {
                            AnnouncementId = 9,
                            Date = new DateTime(2021, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Jutrzejsze zajęcia crossfit zostały odwołane - przepraszamy."
                        },
                        new
                        {
                            AnnouncementId = 10,
                            Date = new DateTime(2021, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Kod promocyjny na suplementy w sklepie abc = rabat12."
                        },
                        new
                        {
                            AnnouncementId = 11,
                            Date = new DateTime(2021, 12, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Odbierz kod zniżkowy na suplementacje w recepcji."
                        },
                        new
                        {
                            AnnouncementId = 12,
                            Date = new DateTime(2021, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Wesołych świąt."
                        });
                });

            modelBuilder.Entity("GymManager.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegisterDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("GymManager.Domain.Entities.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientId"));

                    b.Property<bool>("IsPrivateAccount")
                        .HasColumnType("bit");

                    b.Property<string>("NipNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ClientId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Clients", (string)null);
                });

            modelBuilder.Entity("GymManager.Domain.Entities.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<DateTime?>("DateOfDismissal")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfEmployment")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<decimal>("Salary")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WebsiteRaw")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebsiteUrl")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("EmployeeId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Employees", (string)null);
                });

            modelBuilder.Entity("GymManager.Domain.Entities.EmployeeEvent", b =>
                {
                    b.Property<int>("EmployeeEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeEventId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("End")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsFullDay")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EmployeeEventId");

                    b.HasIndex("UserId");

                    b.ToTable("EmployeeEvents", (string)null);
                });

            modelBuilder.Entity("GymManager.Domain.Entities.File", b =>
                {
                    b.Property<int>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FileId"));

                    b.Property<long>("Bytes")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("FileId");

                    b.ToTable("Files", (string)null);
                });

            modelBuilder.Entity("GymManager.Domain.Entities.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MethodOfPayment")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<string>("TicketId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Value")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("InvoiceId");

                    b.HasIndex("TicketId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Invoices", (string)null);
                });

            modelBuilder.Entity("GymManager.Domain.Entities.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LanguageId"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("LanguageId");

                    b.ToTable("Languages", (string)null);

                    b.HasData(
                        new
                        {
                            LanguageId = 1,
                            Key = "pl",
                            Name = "Polski"
                        },
                        new
                        {
                            LanguageId = 2,
                            Key = "en",
                            Name = "Angielski"
                        });
                });

            modelBuilder.Entity("GymManager.Domain.Entities.Settings", b =>
                {
                    b.Property<int>("SettingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SettingsId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("SettingsId");

                    b.ToTable("Settings", (string)null);

                    b.HasData(
                        new
                        {
                            SettingsId = 1,
                            Description = "E-mail",
                            Order = 2
                        },
                        new
                        {
                            SettingsId = 2,
                            Description = "Ogólne",
                            Order = 1
                        });
                });

            modelBuilder.Entity("GymManager.Domain.Entities.SettingsPosition", b =>
                {
                    b.Property<int>("SettingsPositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SettingsPositionId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("SettingsId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("SettingsPositionId");

                    b.HasIndex("SettingsId");

                    b.ToTable("SettingsPositions", (string)null);

                    b.HasData(
                        new
                        {
                            SettingsPositionId = 1,
                            Description = "Host",
                            Key = "HostSmtp",
                            Order = 1,
                            SettingsId = 1,
                            Type = 0,
                            Value = "smtp.gmail.com"
                        },
                        new
                        {
                            SettingsPositionId = 2,
                            Description = "Port",
                            Key = "Port",
                            Order = 2,
                            SettingsId = 1,
                            Type = 2,
                            Value = "587"
                        },
                        new
                        {
                            SettingsPositionId = 3,
                            Description = "Adres e-mail nadawcy",
                            Key = "SenderEmail",
                            Order = 3,
                            SettingsId = 1,
                            Type = 0,
                            Value = ""
                        },
                        new
                        {
                            SettingsPositionId = 4,
                            Description = "Hasło",
                            Key = "SenderEmailPassword",
                            Order = 4,
                            SettingsId = 1,
                            Type = 4,
                            Value = ""
                        },
                        new
                        {
                            SettingsPositionId = 5,
                            Description = "Nazwa nadawcy",
                            Key = "SenderName",
                            Order = 5,
                            SettingsId = 1,
                            Type = 0,
                            Value = "GymManager"
                        },
                        new
                        {
                            SettingsPositionId = 6,
                            Description = "Login nadawcy",
                            Key = "SenderLogin",
                            Order = 6,
                            SettingsId = 1,
                            Type = 0,
                            Value = ""
                        },
                        new
                        {
                            SettingsPositionId = 7,
                            Description = "Czy wyświetlać banner na stronie głównej?",
                            Key = "BannerVisible",
                            Order = 1,
                            SettingsId = 2,
                            Type = 1,
                            Value = "True"
                        },
                        new
                        {
                            SettingsPositionId = 8,
                            Description = "Kolor footera strony głównej",
                            Key = "FooterColor",
                            Order = 2,
                            SettingsId = 2,
                            Type = 5,
                            Value = "#dc3545"
                        },
                        new
                        {
                            SettingsPositionId = 9,
                            Description = "Główny adres e-mail administratora",
                            Key = "AdminEmail",
                            Order = 3,
                            SettingsId = 2,
                            Type = 0,
                            Value = ""
                        });
                });

            modelBuilder.Entity("GymManager.Domain.Entities.Ticket", b =>
                {
                    b.Property<string>("TicketId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TicketTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TicketId");

                    b.HasIndex("TicketTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Tickets", (string)null);
                });

            modelBuilder.Entity("GymManager.Domain.Entities.TicketType", b =>
                {
                    b.Property<int>("TicketTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketTypeId"));

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TicketTypeEnum")
                        .HasColumnType("int");

                    b.HasKey("TicketTypeId");

                    b.ToTable("TicketTypes", (string)null);

                    b.HasData(
                        new
                        {
                            TicketTypeId = 1,
                            Price = 10m,
                            TicketTypeEnum = 0
                        },
                        new
                        {
                            TicketTypeId = 2,
                            Price = 25m,
                            TicketTypeEnum = 1
                        },
                        new
                        {
                            TicketTypeId = 3,
                            Price = 100m,
                            TicketTypeEnum = 2
                        },
                        new
                        {
                            TicketTypeId = 4,
                            Price = 1000m,
                            TicketTypeEnum = 3
                        });
                });

            modelBuilder.Entity("GymManager.Domain.Entities.TicketTypeTranslation", b =>
                {
                    b.Property<int>("TicketTypeTranslationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketTypeTranslationId"));

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketTypeId")
                        .HasColumnType("int");

                    b.HasKey("TicketTypeTranslationId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("TicketTypeId");

                    b.ToTable("TicketTypeTranslations", (string)null);

                    b.HasData(
                        new
                        {
                            TicketTypeTranslationId = 1,
                            LanguageId = 1,
                            Name = "Jednorazowy",
                            TicketTypeId = 1
                        },
                        new
                        {
                            TicketTypeTranslationId = 2,
                            LanguageId = 2,
                            Name = "Single",
                            TicketTypeId = 1
                        },
                        new
                        {
                            TicketTypeTranslationId = 3,
                            LanguageId = 1,
                            Name = "Tygodniowy",
                            TicketTypeId = 2
                        },
                        new
                        {
                            TicketTypeTranslationId = 4,
                            LanguageId = 2,
                            Name = "Weekly",
                            TicketTypeId = 2
                        },
                        new
                        {
                            TicketTypeTranslationId = 5,
                            LanguageId = 1,
                            Name = "Miesięczny",
                            TicketTypeId = 3
                        },
                        new
                        {
                            TicketTypeTranslationId = 6,
                            LanguageId = 2,
                            Name = "Monthly",
                            TicketTypeId = 3
                        },
                        new
                        {
                            TicketTypeTranslationId = 7,
                            LanguageId = 1,
                            Name = "Roczny",
                            TicketTypeId = 4
                        },
                        new
                        {
                            TicketTypeTranslationId = 8,
                            LanguageId = 2,
                            Name = "Annual",
                            TicketTypeId = 4
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "C854A873-3D75-4973-AD7E-A83C95726133",
                            ConcurrencyStamp = "C778085D-D407-4936-8A19-350C6817AA5D",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "EC23C152-A1C5-4D9A-B8D4-FAE62D5F059D",
                            ConcurrencyStamp = "A1277894-E24D-490E-A3BA-83F9CF5F838D",
                            Name = "Klient",
                            NormalizedName = "KLIENT"
                        },
                        new
                        {
                            Id = "ADE32A3F-6149-475A-8155-CFE5D69ACA42",
                            ConcurrencyStamp = "B50B7D83-F6E6-4DE3-8346-7D0E8501EEB5",
                            Name = "Pracownik",
                            NormalizedName = "PRACOWNIK"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GymManager.Domain.Entities.Address", b =>
                {
                    b.HasOne("GymManager.Domain.Entities.ApplicationUser", "User")
                        .WithOne("Address")
                        .HasForeignKey("GymManager.Domain.Entities.Address", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GymManager.Domain.Entities.Client", b =>
                {
                    b.HasOne("GymManager.Domain.Entities.ApplicationUser", "User")
                        .WithOne("Client")
                        .HasForeignKey("GymManager.Domain.Entities.Client", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GymManager.Domain.Entities.Employee", b =>
                {
                    b.HasOne("GymManager.Domain.Entities.ApplicationUser", "User")
                        .WithOne("Employee")
                        .HasForeignKey("GymManager.Domain.Entities.Employee", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GymManager.Domain.Entities.EmployeeEvent", b =>
                {
                    b.HasOne("GymManager.Domain.Entities.ApplicationUser", "User")
                        .WithMany("EmployeeEvents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GymManager.Domain.Entities.Invoice", b =>
                {
                    b.HasOne("GymManager.Domain.Entities.Ticket", "Ticket")
                        .WithOne("Invoice")
                        .HasForeignKey("GymManager.Domain.Entities.Invoice", "TicketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GymManager.Domain.Entities.ApplicationUser", "User")
                        .WithMany("Invoices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GymManager.Domain.Entities.SettingsPosition", b =>
                {
                    b.HasOne("GymManager.Domain.Entities.Settings", "Settings")
                        .WithMany("Positions")
                        .HasForeignKey("SettingsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Settings");
                });

            modelBuilder.Entity("GymManager.Domain.Entities.Ticket", b =>
                {
                    b.HasOne("GymManager.Domain.Entities.TicketType", "TicketType")
                        .WithMany("Tickets")
                        .HasForeignKey("TicketTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GymManager.Domain.Entities.ApplicationUser", "User")
                        .WithMany("Tickets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TicketType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GymManager.Domain.Entities.TicketTypeTranslation", b =>
                {
                    b.HasOne("GymManager.Domain.Entities.Language", "Language")
                        .WithMany("Translations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GymManager.Domain.Entities.TicketType", "TicketType")
                        .WithMany("Translations")
                        .HasForeignKey("TicketTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("TicketType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GymManager.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GymManager.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymManager.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GymManager.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GymManager.Domain.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Client");

                    b.Navigation("Employee");

                    b.Navigation("EmployeeEvents");

                    b.Navigation("Invoices");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("GymManager.Domain.Entities.Language", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("GymManager.Domain.Entities.Settings", b =>
                {
                    b.Navigation("Positions");
                });

            modelBuilder.Entity("GymManager.Domain.Entities.Ticket", b =>
                {
                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("GymManager.Domain.Entities.TicketType", b =>
                {
                    b.Navigation("Tickets");

                    b.Navigation("Translations");
                });
#pragma warning restore 612, 618
        }
    }
}
